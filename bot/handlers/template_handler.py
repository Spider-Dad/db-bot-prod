"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞,
—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""

import logging
import telebot
from telebot import types
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime

from bot.core.models import NotificationTemplate
from bot.services.template_service import TemplateService
from bot.services.user_service import UserService
from bot.constants import EMOJI, ERROR_MESSAGES, ALLOWED_HTML_TAGS, TEMPLATE_VARIABLES, TEMPLATE_HELP_TEXT
from .base_handler import BaseHandler
from .decorators import admin_required, log_errors, command_args

logger = logging.getLogger(__name__)


class TemplateHandler(BaseHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º
    —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    
    def __init__(self, bot: telebot.TeleBot, template_service: TemplateService, user_service: UserService, setting_service):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
            template_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            user_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            setting_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        super().__init__(bot)
        self.template_service = template_service
        self.user_service = user_service
        self.setting_service = setting_service
        
    def register_handlers(self) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤.
        """
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
        self.bot.register_message_handler(self.get_templates, commands=['get_templates'])
        self.bot.register_message_handler(self.set_template, commands=['set_template'])
        self.bot.register_message_handler(self.update_template, commands=['update_template'])
        self.bot.register_message_handler(self.delete_template, commands=['delete_template'])
        self.bot.register_message_handler(self.preview_template, commands=['preview_template'])
        self.bot.register_message_handler(self.test_template, commands=['test_template'])
        self.bot.register_message_handler(self.activate_template, commands=['activate_template'])
        self.bot.register_message_handler(self.deactivate_template, commands=['deactivate_template'])
        self.bot.register_message_handler(self.help_template, commands=['help_template'])
        self.bot.register_message_handler(self.menu_templates, commands=['menu_templates'])
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
        self.bot.register_callback_query_handler(self.cmd_add_template_callback, func=lambda call: call.data == 'cmd_add_template')
        self.bot.register_callback_query_handler(self.cmd_remove_template_callback, func=lambda call: call.data == 'cmd_remove_template')
        self.bot.register_callback_query_handler(self.cmd_templates_list_callback, func=lambda call: call.data == 'cmd_templates_list')
        self.bot.register_callback_query_handler(self.cmd_update_template_callback, func=lambda call: call.data == 'cmd_update_template')
        self.bot.register_callback_query_handler(self.cmd_test_template_callback, func=lambda call: call.data == 'cmd_test_template')
        self.bot.register_callback_query_handler(self.cmd_preview_template_callback, func=lambda call: call.data == 'cmd_preview_template')
        self.bot.register_callback_query_handler(self.cmd_activate_template_callback, func=lambda call: call.data == 'cmd_activate_template')
        self.bot.register_callback_query_handler(self.cmd_deactivate_template_callback, func=lambda call: call.data == 'cmd_deactivate_template')
        self.bot.register_callback_query_handler(self.cmd_template_help_callback, func=lambda call: call.data == 'cmd_template_help')
        self.bot.register_callback_query_handler(self.menu_templates_callback, func=lambda call: call.data == 'menu_templates')
    
    @admin_required
    @log_errors
    def get_templates(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_templates.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
            templates = self.template_service.get_all_templates()
            
            if not templates:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = types.InlineKeyboardMarkup()
                back_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                    callback_data="menu_templates"
                )
                keyboard.add(back_btn)
                
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['info']} –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                    reply_markup=keyboard
                )
                return
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            for i, template in enumerate(templates):
                template_id = template.id
                name = template.name
                category = template.category
                text = template.template
                is_active = template.is_active
                created_at = template.created_at
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
                try:
                    if isinstance(created_at, str):
                        created_at_obj = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S")
                        created_at_str = created_at_obj.strftime("%Y-%m-%d %H:%M:%S")
                    else:
                        created_at_str = created_at.strftime("%Y-%m-%d %H:%M:%S")
                except:
                    created_at_str = str(created_at)
                
                # –°—Ç–∞—Ç—É—Å —à–∞–±–ª–æ–Ω–∞
                status_emoji = "‚úÖ" if is_active else "‚ùå"
                status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if is_active else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                notification_settings = self.setting_service.get_settings_by_template_id(template_id)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞–±–ª–æ–Ω–µ
                template_text = f"üìã <b>–®–∞–±–ª–æ–Ω #{template_id}</b>\n"
                template_text += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
                template_text += f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
                template_text += f"‚è± <b>–°–æ–∑–¥–∞–Ω:</b> {created_at_str}\n"
                template_text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
                if notification_settings:
                    template_text += f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n"
                    for setting in notification_settings:
                        # –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        setting_name = setting.name if hasattr(setting, 'name') and setting.name else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                        
                        # –î–Ω–∏ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        days_before = setting.days_before if hasattr(setting, 'days_before') else 0
                        time_to_send = setting.time_to_send if hasattr(setting, 'time_to_send') else '12:00'
                        
                        # –°—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        setting_active = hasattr(setting, 'is_active') and setting.is_active
                        setting_emoji = "‚úÖ" if setting_active else "‚ùå"
                        setting_status = "–ê–∫—Ç–∏–≤–Ω–∞" if setting_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                        
                        template_text += f"‚Ä¢ {setting_name}: –ó–∞ {days_before} –¥–Ω–µ–π –≤ {time_to_send} - {setting_emoji} {setting_status}\n"
                    template_text += "\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
                template_text += f"üî§ <b>–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:</b>\n\n{text}\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–±–ª–æ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                if i == len(templates) - 1:
                    keyboard = types.InlineKeyboardMarkup()
                    back_btn = types.InlineKeyboardButton(
                        text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                        callback_data="menu_templates"
                    )
                    keyboard.add(back_btn)
                    self.send_message(message.chat.id, template_text, reply_markup=keyboard)
                else:
                    self.send_message(message.chat.id, template_text)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {message.from_user.id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            self.send_message(
                message.chat.id,
                f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> {str(e)}"
            )
    
    @admin_required
    @log_errors
    def set_template(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_template.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            args = self.extract_command_args(message.text)
            
            if len(args) < 2:
                # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
                # (–∫–∞–∫ –≤ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ cmd_add_template_callback)
                
                # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —à–∞–±–ª–æ–Ω–∞
                text = (
                    f"{EMOJI['plus']} <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                    f"–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    f"<code>/set_template [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞]</code>\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    f"<code>/set_template –î–µ–Ω—å_—Ä–æ–∂–¥–µ–Ω–∏—è birthday –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {{name}}!</code>\n\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
                    f"‚Ä¢ {{name}} - –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    f"‚Ä¢ {{first_name}} - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    f"‚Ä¢ {{last_name}} - –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    f"‚Ä¢ {{date}} - –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è\n"
                    f"‚Ä¢ {{date_before}} - –î–∞—Ç–∞ –∑–∞ –¥–µ–Ω—å –¥–æ —Å–æ–±—ã—Ç–∏—è\n"
                    f"‚Ä¢ {{days_until}} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è\n"
                    f"‚Ä¢ {{phone_pay}} - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
                    f"‚Ä¢ {{name_pay}} - –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–ª–∞—Ç–µ–∂–∞"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = types.InlineKeyboardMarkup()
                back_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                    callback_data="menu_templates"
                )
                keyboard.add(back_btn)
                
                self.send_message(message.chat.id, text, reply_markup=keyboard)
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            name = args[0]
            category = args[1] if len(args) > 2 else "general"
            text = args[2] if len(args) > 2 else args[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å HTML-—Ç–µ–≥–æ–≤
            if not self._validate_html_tags(text):
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –®–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ HTML-—Ç–µ–≥–∏.\n\n"
                    f"–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏: {', '.join(ALLOWED_HTML_TAGS)}"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞
            if not self._validate_template_variables(text):
                valid_vars = ", ".join([f"{{{v}}}" for v in TEMPLATE_VARIABLES])
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –®–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.\n\n"
                    f"–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {valid_vars}"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
            template = NotificationTemplate(
                name=name,
                category=category,
                text=text,
                is_active=True
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –≤ –±–∞–∑—É
            result = self.template_service.create_template(template)
            
            if result:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞
                keyboard = types.InlineKeyboardMarkup()
                back_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                    callback_data="menu_templates"
                )
                keyboard.add(back_btn)
                
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['success']} –®–∞–±–ª–æ–Ω \"{name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.",
                    reply_markup=keyboard
                )
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω \"{name}\" –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")
            else:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            self.send_message(
                message.chat.id,
                f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> {str(e)}"
            )
    
    @admin_required
    @log_errors
    def update_template(self, message: types.Message, args: List[str] = None) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_template.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if not args or len(args) < 2:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤" –∏ "–ù–∞–∑–∞–¥"
                keyboard = types.InlineKeyboardMarkup()
                list_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                    callback_data="cmd_templates_list"
                )
                back_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                    callback_data="menu_templates"
                )
                keyboard.add(list_btn)
                keyboard.add(back_btn)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.send_message(
                    message.chat.id, 
                    f"{EMOJI['edit']} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                    f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    f"<code>/update_template [id] [–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç]</code>\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    f"<code>/update_template 1 –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞</code>\n\n"
                    f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_templates –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤¬ª.",
                    reply_markup=keyboard
                )
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞ –∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            try:
                template_id = int(args[0])
            except ValueError:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> ID —à–∞–±–ª–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
                )
                return
            
            new_text = args[1]
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã
            template = self.template_service.get_template_by_id(template_id)
            
            if not template:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –®–∞–±–ª–æ–Ω —Å ID {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å HTML-—Ç–µ–≥–æ–≤
            if not self._validate_html_tags(new_text):
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –®–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ HTML-—Ç–µ–≥–∏.\n\n"
                    f"–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏: {', '.join(ALLOWED_HTML_TAGS)}"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞
            if not self._validate_template_variables(new_text):
                valid_vars = ", ".join([f"{{{v}}}" for v in TEMPLATE_VARIABLES])
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –®–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.\n\n"
                    f"–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {valid_vars}"
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
            template.template = new_text
            result = self.template_service.update_template(template)
            
            if result:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['success']} –®–∞–±–ª–æ–Ω —Å ID {template_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω."
                )
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω —Å ID {template_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")
            else:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            self.send_message(
                message.chat.id,
                f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> {str(e)}"
            )
    
    @admin_required
    @log_errors
    def delete_template(self, message: types.Message, args: List[str] = None) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_template.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if not args or len(args) < 1:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤" –∏ "–ù–∞–∑–∞–¥"
                keyboard = types.InlineKeyboardMarkup()
                list_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                    callback_data="cmd_templates_list"
                )
                back_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                    callback_data="menu_templates"
                )
                keyboard.add(list_btn)
                keyboard.add(back_btn)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.send_message(
                    message.chat.id, 
                    f"{EMOJI['minus']} <b>–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                    f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    f"<code>/delete_template [id]</code>\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    f"<code>/delete_template 1</code>\n\n"
                    f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_templates –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤¬ª.",
                    reply_markup=keyboard
                )
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞
            try:
                template_id = int(args[0])
            except ValueError:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> ID —à–∞–±–ª–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            template = self.template_service.get_template_by_id(template_id)
            
            if not template:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –®–∞–±–ª–æ–Ω —Å ID {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return
            
            # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω
            result = self.template_service.delete_template(template_id)
            
            if result:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['success']} –®–∞–±–ª–æ–Ω —Å ID {template_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
                )
                logger.info(f"–£–¥–∞–ª–µ–Ω —à–∞–±–ª–æ–Ω —Å ID {template_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")
            else:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            self.send_message(
                message.chat.id,
                f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> {str(e)}"
            )
            
    @admin_required
    @log_errors
    def preview_template(self, message: types.Message, args: List[str] = None) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /preview_template.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if not args or len(args) < 1:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤" –∏ "–ù–∞–∑–∞–¥"
                keyboard = types.InlineKeyboardMarkup()
                list_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                    callback_data="cmd_templates_list"
                )
                back_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                    callback_data="menu_templates"
                )
                keyboard.add(list_btn)
                keyboard.add(back_btn)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.send_message(
                    message.chat.id, 
                    f"{EMOJI['eye']} <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                    f"–î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    f"<code>/preview_template [id]</code>\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    f"<code>/preview_template 1</code>\n\n"
                    f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_templates –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤¬ª.",
                    reply_markup=keyboard
                )
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞
            try:
                template_id = int(args[0])
            except ValueError:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> ID —à–∞–±–ª–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã
            template = self.template_service.get_template_by_id(template_id)
            
            if not template:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –®–∞–±–ª–æ–Ω —Å ID {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            sample_data = {
                'name': '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
                'username': 'ivanov',
                'date': '01.01.2025',
                'days_until': 3
            }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω —Å –ø—Ä–∏–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
            try:
                formatted_text = self.template_service.format_template(template, sample_data)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                preview_text = (
                    f"{EMOJI['template']} <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞:</b>\n"
                    f"ID: {template_id}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {template.name}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template.category}\n\n"
                    f"<b>–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞:</b>\n<code>{template.template}</code>\n\n"
                    f"<b>–° –ø—Ä–∏–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö:</b>\n{formatted_text}"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = types.InlineKeyboardMarkup()
                back_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                    callback_data="menu_templates"
                )
                keyboard.add(back_btn)
                
                self.send_message(message.chat.id, preview_text, reply_markup=keyboard)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞ —Å ID {template_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {message.from_user.id}")
                
            except Exception as format_error:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:</b> {str(format_error)}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            self.send_message(
                message.chat.id,
                f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> {str(e)}"
            )
    
    @admin_required
    @log_errors
    def test_template(self, message: types.Message, args: List[str] = None) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_template.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if not args or len(args) < 2:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤" –∏ "–ù–∞–∑–∞–¥"
                keyboard = types.InlineKeyboardMarkup()
                list_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                    callback_data="cmd_templates_list"
                )
                back_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                    callback_data="menu_templates"
                )
                keyboard.add(list_btn)
                keyboard.add(back_btn)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.send_message(
                    message.chat.id, 
                    f"{EMOJI['test']} <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                    f"–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    f"<code>/test_template [id_—à–∞–±–ª–æ–Ω–∞] [id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]</code>\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    f"<code>/test_template 1 123456789</code>\n\n"
                    f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                    reply_markup=keyboard
                )
                return
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
            try:
                template_id = int(args[0])
            except ValueError:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> ID —à–∞–±–ª–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
                )
                return
                
            try:
                user_id = int(args[1])
            except ValueError:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã
            template = self.template_service.get_template_by_id(template_id)
            
            if not template:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –®–∞–±–ª–æ–Ω —Å ID {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
            user = self.user_service.get_user_by_telegram_id(user_id)
            
            if not user:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            template_data = {
                'name': f"{user.first_name} {user.last_name}".strip() if user.last_name else user.first_name,
                'username': user.username,
                'date': datetime.now().strftime('%d.%m.%Y'),
                'days_until': 3  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            }
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
            try:
                formatted_text = self.template_service.format_template(template, template_data)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    self.send_message(user_id, formatted_text)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    self.send_message(
                        message.chat.id,
                        f"{EMOJI['success']} –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}."
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —à–∞–±–ª–æ–Ω–æ–º ID {template_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                except Exception as send_error:
                    self.send_message(
                        message.chat.id,
                        f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {str(send_error)}"
                    )
                
            except Exception as format_error:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:</b> {str(format_error)}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            self.send_message(
                message.chat.id,
                f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> {str(e)}"
            )
    
    @admin_required
    @log_errors
    def activate_template(self, message: types.Message, args: List[str] = None) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /activate_template.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if not args or len(args) < 1:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤" –∏ "–ù–∞–∑–∞–¥"
                keyboard = types.InlineKeyboardMarkup()
                list_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                    callback_data="cmd_templates_list"
                )
                back_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                    callback_data="menu_templates"
                )
                keyboard.add(list_btn)
                keyboard.add(back_btn)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.send_message(
                    message.chat.id, 
                    f"{EMOJI['check']} <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                    f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    f"<code>/activate_template [id]</code>\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    f"<code>/activate_template 1</code>\n\n"
                    f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_templates –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤¬ª.",
                    reply_markup=keyboard
                )
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞
            try:
                template_id = int(args[0])
            except ValueError:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> ID —à–∞–±–ª–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            template = self.template_service.get_template_by_id(template_id)
            
            if not template:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –®–∞–±–ª–æ–Ω —Å ID {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return
            
            # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            if template.is_active:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['info']} –®–∞–±–ª–æ–Ω —Å ID {template_id} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω."
                )
                return
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
            result = self.template_service.toggle_template_active(template_id, True)
            
            if result:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['success']} –®–∞–±–ª–æ–Ω —Å ID {template_id} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
                )
                logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —à–∞–±–ª–æ–Ω —Å ID {template_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")
            else:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            self.send_message(
                message.chat.id,
                f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> {str(e)}"
            )
    
    @admin_required
    @log_errors
    def deactivate_template(self, message: types.Message, args: List[str] = None) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deactivate_template.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if not args or len(args) < 1:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤" –∏ "–ù–∞–∑–∞–¥"
                keyboard = types.InlineKeyboardMarkup()
                list_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                    callback_data="cmd_templates_list"
                )
                back_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                    callback_data="menu_templates"
                )
                keyboard.add(list_btn)
                keyboard.add(back_btn)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.send_message(
                    message.chat.id, 
                    f"{EMOJI['cross']} <b>–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                    f"–î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    f"<code>/deactivate_template [id]</code>\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    f"<code>/deactivate_template 1</code>\n\n"
                    f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_templates –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤¬ª.",
                    reply_markup=keyboard
                )
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞
            try:
                template_id = int(args[0])
            except ValueError:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> ID —à–∞–±–ª–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            template = self.template_service.get_template_by_id(template_id)
            
            if not template:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –®–∞–±–ª–æ–Ω —Å ID {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                return
            
            # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            if not template.is_active:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['info']} –®–∞–±–ª–æ–Ω —Å ID {template_id} —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω."
                )
                return
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
            result = self.template_service.toggle_template_active(template_id, False)
            
            if result:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['success']} –®–∞–±–ª–æ–Ω —Å ID {template_id} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
                )
                logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —à–∞–±–ª–æ–Ω —Å ID {template_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")
            else:
                self.send_message(
                    message.chat.id,
                    f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}")
            self.send_message(
                message.chat.id,
                f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞:</b> {str(e)}"
            )
    
    @admin_required
    @log_errors
    def help_template(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help_template.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        help_text = TEMPLATE_HELP_TEXT
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton(
            text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
            callback_data="menu_templates"
        )
        keyboard.add(back_btn)
        
        self.send_message(message.chat.id, help_text, reply_markup=keyboard)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {message.from_user.id}")
    
    def extract_command_args(self, command_text: str) -> List[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã.
        
        Args:
            command_text: –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        """
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –ø—Ä–æ–±–µ–ª—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å (—Å–∞–º—É –∫–æ–º–∞–Ω–¥—É)
        parts = command_text.split(' ', 1)
        if len(parts) < 2:
            return []
        
        args_text = parts[1].strip()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if not args_text:
            return []
        
        # –î–ª—è –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤, —Ä–∞–∑–¥–µ–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Å–æ–±—ã–º –æ–±—Ä–∞–∑–æ–º
        if command_text.startswith(('/set_template', '/update_template')):
            args = []
            # –ú–∞–∫—Å–∏–º—É–º 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞: –∏–º—è, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ç–µ–∫—Å—Ç
            parts = args_text.split(' ', 2)
            for part in parts:
                if part:
                    args.append(part)
            return args
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª—É
        return [arg for arg in args_text.split(' ') if arg]
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    
    @log_errors
    def cmd_add_template_callback(self, call: types.CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã add_template.
        
        Args:
            call: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self.is_admin(call.from_user.id):
                self.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                return
            
            # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —à–∞–±–ª–æ–Ω–∞
            text = (
                f"{EMOJI['plus']} <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                f"–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"<code>/set_template [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞]</code>\n\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                f"<code>/set_template –î–µ–Ω—å_—Ä–æ–∂–¥–µ–Ω–∏—è birthday –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {{name}}!</code>\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
                f"‚Ä¢ {{name}} - –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"‚Ä¢ {{first_name}} - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"‚Ä¢ {{last_name}} - –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"‚Ä¢ {{date}} - –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è\n"
                f"‚Ä¢ {{date_before}} - –î–∞—Ç–∞ –∑–∞ –¥–µ–Ω—å –¥–æ —Å–æ–±—ã—Ç–∏—è\n"
                f"‚Ä¢ {{days_until}} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è\n"
                f"‚Ä¢ {{phone_pay}} - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
                f"‚Ä¢ {{name_pay}} - –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–ª–∞—Ç–µ–∂–∞"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                callback_data="menu_templates"
            )
            keyboard.add(back_btn)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
            self.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞ cmd_add_template: {str(e)}")
            self.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    @log_errors
    def cmd_remove_template_callback(self, call: types.CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã remove_template.
        
        Args:
            call: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self.is_admin(call.from_user.id):
                self.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                return
            
            # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ —É–¥–∞–ª–µ–Ω–∏—é —à–∞–±–ª–æ–Ω–∞
            text = (
                f"{EMOJI['minus']} <b>–£–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"<code>/delete_template [id]</code>\n\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                f"<code>/delete_template 1</code>\n\n"
                f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_templates –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤¬ª."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤" –∏ "–ù–∞–∑–∞–¥"
            keyboard = types.InlineKeyboardMarkup()
            list_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                callback_data="cmd_templates_list"
            )
            back_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                callback_data="menu_templates"
            )
            keyboard.add(list_btn)
            keyboard.add(back_btn)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
            self.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞ cmd_remove_template: {str(e)}")
            self.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    @log_errors
    def cmd_templates_list_callback(self, call: types.CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤.
        
        Args:
            call: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self.is_admin(call.from_user.id):
                self.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
            templates = self.template_service.get_all_templates()
            
            if not templates:
                text = f"{EMOJI['info']} –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                keyboard = types.InlineKeyboardMarkup()
                back_btn = types.InlineKeyboardButton(
                    text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                    callback_data="menu_templates"
                )
                keyboard.add(back_btn)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                return
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
            self.answer_callback_query(call.id, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
            keyboard = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                callback_data="menu_templates"
            )
            keyboard.add(back_btn)
            
            # –ï—Å–ª–∏ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            if len(templates) == 1:
                template = templates[0]
                template_text = self._format_template_info(template)
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º —à–∞–±–ª–æ–Ω–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=template_text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            else:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º —à–∞–±–ª–æ–Ω–æ–º –ë–ï–ó –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
                first_template = templates[0]
                first_template_text = self._format_template_info(first_template)
                
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=first_template_text,
                    parse_mode='HTML'  # –ë–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –±–µ–∑ –∫–Ω–æ–ø–∫–∏
                for template in templates[1:-1]:
                    template_text = self._format_template_info(template)
                    self.send_message(call.message.chat.id, template_text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–±–ª–æ–Ω —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                last_template = templates[-1]
                last_template_text = self._format_template_info(last_template)
                self.send_message(
                    call.message.chat.id, 
                    last_template_text, 
                    reply_markup=keyboard
                )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {call.from_user.id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}")
            self.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    def _format_template_info(self, template) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Args:
            template: –û–±—ä–µ–∫—Ç —à–∞–±–ª–æ–Ω–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞–±–ª–æ–Ω–µ
        """
        template_id = template.id
        name = template.name
        category = template.category
        text = template.template
        is_active = template.is_active
        created_at = template.created_at
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        try:
            if isinstance(created_at, str):
                created_at_obj = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S")
                created_at_str = created_at_obj.strftime("%Y-%m-%d %H:%M:%S")
            else:
                created_at_str = created_at.strftime("%Y-%m-%d %H:%M:%S")
        except:
            created_at_str = str(created_at)
        
        # –°—Ç–∞—Ç—É—Å —à–∞–±–ª–æ–Ω–∞
        status_emoji = "‚úÖ" if is_active else "‚ùå"
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if is_active else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        notification_settings = self.setting_service.get_settings_by_template_id(template_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞–±–ª–æ–Ω–µ
        template_text = f"üìã <b>–®–∞–±–ª–æ–Ω #{template_id}</b>\n"
        template_text += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
        template_text += f"üî£ <b>–¢–µ–∫—Å—Ç:</b>\n\n{text}\n\n"
        template_text += f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
        template_text += f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {created_at_str}\n"
        template_text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}\n"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        if notification_settings:
            template_text += f"\nüìÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n"
            for setting in notification_settings:
                days_before = setting.days_before
                time = setting.time
                is_setting_active = setting.is_active
                setting_status = "‚úÖ" if is_setting_active else "‚ùå"
                
                if days_before == 0:
                    days_text = "–í –¥–µ–Ω—å —Å–æ–±—ã—Ç–∏—è"
                elif days_before == 1:
                    days_text = "–ó–∞ 1 –¥–µ–Ω—å"
                else:
                    days_text = f"–ó–∞ {days_before} –¥–Ω–µ–π"
                
                template_text += f"‚è∞ {setting_status} {days_text} –≤ {time}\n"
        
        return template_text
    
    @log_errors
    def cmd_update_template_callback(self, call: types.CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã update_template.
        
        Args:
            call: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self.is_admin(call.from_user.id):
                self.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                return
            
            # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —à–∞–±–ª–æ–Ω–∞
            text = (
                f"{EMOJI['edit']} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"<code>/update_template [id] [—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞]</code>\n\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                f"<code>/update_template 1 –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ </code>\n\n"
                f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_templates –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤¬ª."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤" –∏ "–ù–∞–∑–∞–¥"
            keyboard = types.InlineKeyboardMarkup()
            list_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                callback_data="cmd_templates_list"
            )
            back_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                callback_data="menu_templates"
            )
            keyboard.add(list_btn)
            keyboard.add(back_btn)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
            self.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞ cmd_update_template: {str(e)}")
            self.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    @log_errors
    def cmd_test_template_callback(self, call: types.CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã test_template.
        
        Args:
            call: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self.is_admin(call.from_user.id):
                self.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤" –∏ "–ù–∞–∑–∞–¥"
            keyboard = types.InlineKeyboardMarkup()
            list_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                callback_data="cmd_templates_list"
            )
            back_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                callback_data="menu_templates"
            )
            keyboard.add(list_btn)
            keyboard.add(back_btn)
            
            # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —à–∞–±–ª–æ–Ω–∞
            text = (
                f"{EMOJI['test']} <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                f"–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"<code>/test_template [id_—à–∞–±–ª–æ–Ω–∞] [id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]</code>\n\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                f"<code>/test_template 1 123456789</code>\n\n"
                f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
            self.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞ cmd_test_template: {str(e)}")
            self.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    @log_errors
    def cmd_preview_template_callback(self, call: types.CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã preview_template.
        
        Args:
            call: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self.is_admin(call.from_user.id):
                self.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                return
            
            # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É —à–∞–±–ª–æ–Ω–∞
            text = (
                f"{EMOJI['eye']} <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                f"–î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"<code>/preview_template [id]</code>\n\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                f"<code>/preview_template 1</code>\n\n"
                f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_templates –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤¬ª."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤" –∏ "–ù–∞–∑–∞–¥"
            keyboard = types.InlineKeyboardMarkup()
            list_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                callback_data="cmd_templates_list"
            )
            back_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                callback_data="menu_templates"
            )
            keyboard.add(list_btn)
            keyboard.add(back_btn)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
            self.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞ cmd_preview_template: {str(e)}")
            self.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    @log_errors
    def cmd_activate_template_callback(self, call: types.CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã activate_template.
        
        Args:
            call: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self.is_admin(call.from_user.id):
                self.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                return
            
            # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞
            text = (
                f"{EMOJI['check']} <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"<code>/activate_template [id]</code>\n\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                f"<code>/activate_template 1</code>\n\n"
                f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_templates –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤¬ª."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤" –∏ "–ù–∞–∑–∞–¥"
            keyboard = types.InlineKeyboardMarkup()
            list_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                callback_data="cmd_templates_list"
            )
            back_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                callback_data="menu_templates"
            )
            keyboard.add(list_btn)
            keyboard.add(back_btn)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
            self.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞ cmd_activate_template: {str(e)}")
            self.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    @log_errors
    def cmd_deactivate_template_callback(self, call: types.CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã deactivate_template.
        
        Args:
            call: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self.is_admin(call.from_user.id):
                self.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                return
            
            # –¢–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞
            text = (
                f"{EMOJI['cross']} <b>–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                f"–î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"<code>/deactivate_template [id]</code>\n\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                f"<code>/deactivate_template 1</code>\n\n"
                f"–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_templates –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤¬ª."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤" –∏ "–ù–∞–∑–∞–¥"
            keyboard = types.InlineKeyboardMarkup()
            list_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                callback_data="cmd_templates_list"
            )
            back_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                callback_data="menu_templates"
            )
            keyboard.add(list_btn)
            keyboard.add(back_btn)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
            self.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞ cmd_deactivate_template: {str(e)}")
            self.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    @log_errors
    def cmd_template_help_callback(self, call: types.CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã template_help.
        
        Args:
            call: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ —à–∞–±–ª–æ–Ω–∞–º
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['back']} –ù–∞–∑–∞–¥", 
                callback_data="menu_templates"
            )
            keyboard.add(back_btn)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=TEMPLATE_HELP_TEXT,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
            self.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞ cmd_template_help: {str(e)}")
            self.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    def _validate_html_tags(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ HTML-—Ç–µ–≥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —à–∞–±–ª–æ–Ω–∞.
        
        Args:
            text: –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
            
        Returns:
            True, –µ—Å–ª–∏ –≤—Å–µ HTML-—Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã, –∏–Ω–∞—á–µ False
        """
        from bot.utils.validators import validate_html
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é validate_html –∏–∑ –º–æ–¥—É–ª—è validators
        is_valid, _ = validate_html(text)
        return is_valid
    
    def _validate_template_variables(self, text: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ —à–∞–±–ª–æ–Ω–∞.
        
        Args:
            text: –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
            
        Returns:
            True, –µ—Å–ª–∏ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã, –∏–Ω–∞—á–µ False
        """
        import re
        
        # –ò—â–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
        var_pattern = re.compile(r'\{([^}]+)\}')
        variables = var_pattern.findall(text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        for var in variables:
            if var not in TEMPLATE_VARIABLES:
                return False
        
        return True
    
    @log_errors
    def menu_templates_callback(self, call: types.CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –º–µ–Ω—é —à–∞–±–ª–æ–Ω–æ–≤.
        
        Args:
            call: Callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not self.is_admin(call.from_user.id):
                self.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                return
            
            # –¢–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∞ —à–∞–±–ª–æ–Ω–æ–≤
            text = (
                f"{EMOJI['template']} <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
                f"–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —à–∞–±–ª–æ–Ω–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
                f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤\n"
                f"‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã\n"
                f"‚Ä¢ –£–¥–∞–ª—è—Ç—å —à–∞–±–ª–æ–Ω—ã\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã\n"
                f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            list_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                callback_data="cmd_templates_list"
            )
            add_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['plus']} –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", 
                callback_data="cmd_add_template"
            )
            update_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['edit']} –ò–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", 
                callback_data="cmd_update_template"
            )
            remove_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['minus']} –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", 
                callback_data="cmd_remove_template"
            )
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            preview_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['eye']} –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", 
                callback_data="cmd_preview_template"
            )
            test_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['test']} –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                callback_data="cmd_test_template"
            )
            activate_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['check']} –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
                callback_data="cmd_activate_template"
            )
            deactivate_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['cross']} –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
                callback_data="cmd_deactivate_template"
            )
            
            # –ö–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
            help_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['help']} –°–ø—Ä–∞–≤–∫–∞", 
                callback_data="cmd_template_help"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            back_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['back']} –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="menu_main"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.add(list_btn, add_btn)
            keyboard.add(update_btn, remove_btn)
            keyboard.add(preview_btn, test_btn)
            keyboard.add(activate_btn, deactivate_btn)
            keyboard.add(help_btn)
            keyboard.add(back_btn)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
            self.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞ menu_templates: {str(e)}")
            self.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    @admin_required
    @log_errors
    def menu_templates(self, message: types.Message) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –¢–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∞ —à–∞–±–ª–æ–Ω–æ–≤
            text = (
                f"{EMOJI['template']} <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
                f"–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —à–∞–±–ª–æ–Ω–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
                f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤\n"
                f"‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω—ã\n"
                f"‚Ä¢ –£–¥–∞–ª—è—Ç—å —à–∞–±–ª–æ–Ω—ã\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã\n"
                f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            list_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['list']} –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", 
                callback_data="cmd_templates_list"
            )
            add_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['plus']} –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", 
                callback_data="cmd_add_template"
            )
            update_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['edit']} –ò–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", 
                callback_data="cmd_update_template"
            )
            remove_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['minus']} –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω", 
                callback_data="cmd_remove_template"
            )
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            preview_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['eye']} –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", 
                callback_data="cmd_preview_template"
            )
            test_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['test']} –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                callback_data="cmd_test_template"
            )
            activate_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['check']} –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
                callback_data="cmd_activate_template"
            )
            deactivate_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['cross']} –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", 
                callback_data="cmd_deactivate_template"
            )
            
            # –ö–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
            help_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['help']} –°–ø—Ä–∞–≤–∫–∞", 
                callback_data="cmd_template_help"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            back_btn = types.InlineKeyboardButton(
                text=f"{EMOJI['back']} –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                callback_data="menu_main"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard.add(list_btn, add_btn)
            keyboard.add(update_btn, remove_btn)
            keyboard.add(preview_btn, test_btn)
            keyboard.add(activate_btn, deactivate_btn)
            keyboard.add(help_btn)
            keyboard.add(back_btn)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            self.send_message(
                chat_id=message.chat.id,
                text=text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ menu_templates: {str(e)}")
            self.send_message(
                chat_id=message.chat.id,
                text=f"{EMOJI['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            ) 